# This is a basic workflow to help you get started with Actions

name: Converge All Nodes 

on:
  push:
    branches: 
      - main
    paths:
      - 'policyfiles/**'
  workflow_dispatch:
  
jobs:
  Setup-ChefWorkstation:
    runs-on: self-hosted
    steps:
      - name: Chef Installed?
        continue-on-error: true
        id: check-chef
        run: chef -v
        
      - name: Installing ChefWorkstation v21.2.278
        if: steps.check-chef.outcome == 'failure'
        run: |
          wget https://packages.chef.io/files/stable/chef-workstation/21.2.278/el/8/chef-workstation-21.2.278-1.el7.x86_64.rpm
          sudo rpm -ivh chef-workstation-21.2.278-1.el7.x86_64.rpm
          rm chef-workstation-21.2.278-1.el7.x86_64.rpm
          chef -v

  Push-Policyfile:
    runs-on: self-hosted
    needs: Setup-ChefWorkstation
    steps:
      - uses: actions/checkout@v2
      - name: Pushing Policyfile to ChefServer
        run: |
          rm -rf policyfiles/*.lock.json
          chef update policyfiles/db-server.rb -c .chef/config.rb
          chef update policyfiles/web-server.rb -c .chef/config.rb
          chef push staging policyfiles/db-server.rb -c .chef/config.rb
          chef push staging policyfiles/web-server.rb -c .chef/config.rb
  
  Converge-Nodes:
    runs-on: self-hosted
    needs: Push-Policyfile
    environment:
      name: staging
    steps:
      - name: Converging all staging nodes...
        run: 
          knife ssh 'policy_group:staging' 'sudo chef-client' -c .chef/config.rb
          
  Inspec-Test:
    runs-on: self-hosted
    needs: Converge-Nodes
    continue-on-error: true
    steps:

      - name: Running InSpec 正常性テスト (基本テスト)
        continue-on-error: true
        id: inspec-check-0
        run: for i in `knife search 'policy_group:staging' -i -c .chef/config.rb | sort`; do inspec exec test/default_test.rb --sudo --target ssh://r-goto@$i -i ~/.ssh/nodes_shared || echo "::set-output name=INSPEC-RESULT::機能不具合の検知"; done      

      - name: Running InSpec 正常性テスト (WEBサーバ機能テスト)
        continue-on-error: true
        id: inspec-check-1
        run: for i in `knife search 'policy_group:staging AND policy_name:web-server' -i -c .chef/config.rb | sort`; do inspec exec test/setup_nginx_test.rb --sudo --target ssh://r-goto@$i -i ~/.ssh/nodes_shared || echo "::set-output name=INSPEC-RESULT::機能不具合の検知"; done

      - name: Running InSpec 正常性テスト (DBサーバ機能テスト)
        continue-on-error: true
        id: inspec-check-last
        if: steps.inspec-check-1.outcome == 'success'
        run: for i in `knife search 'policy_group:staging AND policy_name:db-server' -i -c .chef/config.rb | sort`; do inspec exec test/setup_postgresql_test.rb --sudo --target ssh://r-goto@$i -i ~/.ssh/nodes_shared || echo "::set-output name=INSPEC-RESULT::機能不具合の検知"; done

      - name: 不具合通知 (slack)
        continue-on-error: true
        if: contains ( steps.inspec-check-0.outputs.INSPEC-RESULT, '機能不具合の検知' ) || contains ( steps.inspec-check-1.outputs.INSPEC-RESULT, '機能不具合の検知' )　|| contains ( steps.inspec-check-last.outputs.INSPEC-RESULT, '機能不具合の検知' )
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: "※※※※※機能不具合 検知※※※※※"

      - name: InSpec 正常性テスト結果
        if: contains ( steps.inspec-check-0.outputs.INSPEC-RESULT, '機能不具合の検知' ) || contains ( steps.inspec-check-1.outputs.INSPEC-RESULT, '機能不具合の検知' )　|| contains ( steps.inspec-check-last.outputs.INSPEC-RESULT, '機能不具合の検知' )
        run: echo "※※※※※機能不具合 検知※※※※※" && exit 1

  Secuity-Check:
    runs-on: self-hosted
    needs: Inspec-Test
    steps:
      - name: Running InSpec セキュリティテスト
        id: security-check
        continue-on-error: true
        run: for i in `knife search 'policy_group:staging' -i -c .chef/config.rb | sort`; do inspec exec --sudo test/ssh_security_test.rb --target ssh://r-goto@$i -i ~/.ssh/nodes_shared || echo "::set-output name=INSPEC_RESULT::重大なセキュリティ問題の検知"; done
        
      - name: 不具合通知 (slack)
        continue-on-error: true
        if: contains ( steps.security-check.outputs.INSPEC_RESULT, '重大なセキュリティ問題' )
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: "!!!!検証環境ノードに重大なセキュリティ問題 検知!!!!"

      - name: InSpec セキュリティテスト結果
        if: contains ( steps.security-check.outputs.INSPEC_RESULT, '重大なセキュリティ問題' )
        run: echo "!!!!検証環境ノードに重大なセキュリティ問題 検知!!!" && exit 1